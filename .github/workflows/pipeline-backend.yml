name: BSN-Backend-API-Pipeline

on:
  push:
    branches:
      - main
    paths:
      - book-network/**
      - docker/backend/**
      - 'docker-compose.yml'
      - .github/workflows/*-backend.yml
jobs:
  compile:
    runs-on: ubuntu-latest
    name: Compile project
    steps:
      - name: Checkout cde
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup JDK
        uses: actions/setup-java@v4
        with: 
          java-version: 17
          distribution: 'corretto'
      - name: Grant execute permission for Maven wrapper
        run: |
          cd book-network
          chmod +x mvnw
      - name: Compile project
        run: |
          cd book-network
          ./mvnw clean compile
  unit-test:
    runs-on: ubuntu-latest
    name: Unit tests
    steps:
      - name: Checkout cde
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup JDK
        uses: actions/setup-java@v4
        with: 
          java-version: 17
          distribution: 'corretto'
      - name: Grant execute permission for Maven wrapper
        run: |
          cd book-network
          chmod +x mvnw
      - name: Runing unit Tests
        run: |
          cd book-network
          ./mvnw clean test
  build:
    runs-on: ubuntu-latest
    name: Build backend
    needs: [compile, unit-test]
    steps:
      - name: Checkout cde
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup JDK
        uses: actions/setup-java@v4
        with: 
          java-version: 17
          distribution: 'corretto'
      - name: Grant execute permission for Maven wrapper
        run: |
          cd book-network
          chmod +x mvnw
      - name: Build project
        run: |
          cd book-network
          ./mvnw clean package
  build-image:
    runs-on: ubuntu-latest
    name: Build Docker image
    needs: [build]
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup JDK
        uses: actions/setup-java@v4
        with: 
          java-version: 17
          distribution: 'corretto'
      - name: Grant execute permission for Maven wrapper
        run: |
          cd book-network
          chmod +x mvnw
      - name: Extract project version
        id: extract_version
        run: |
          cd book-network
          echo "VERSION=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Echo API version
        run: |
          echo "API version: ${{ steps.extract_version.outputs.VERSION }}"
      - name: Build & Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: book-network
          file: docker/backend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bsn-api:${{ steps.extract_version.outputs.VERSION }}
          build-args: |
            PROFILE=dev
            APP_VERSION=${{steps.extract_version.outputs.VERSION}}
            POST_USERNAME=${secrets.POSTGRESQL_USERNAME}
            POST_PASSWORD=${secrets.POSTGRESQL_PASSWORD}
            E_PASSWORD=${secrets.EMAIL_PASSWORD}
  # deploy:
  #   name: Deploy Backend
  #   runs-on: ubuntu-latest
  #   needs: [build-image]
  #   steps:

  #     - name: Create deployment folder
  #       run: ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} "mkdir -p ci-cd"

  #     - name: Copy docker-compose file
  #       run: scp -oStrictHostKeyChecking=no docker-compose.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:ci-cd/docker-compose.yml

  #     - name: Set ENV variable and deploy
  #       run: |
  #         ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} <<EOF
  #         export EMAIL_HOST_NAME=${{ secrets.EMAIL_HOSTNAME }}
  #         export EMAIL_USER_NAME=${{ secrets.EMAIL_USERNAME }}
  #         export EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
  #         cd ci-cd
  #         docker compose -f docker-compose.yml pull -q
  #         docker compose -f docker-compose.yml up -d
  #         EOF